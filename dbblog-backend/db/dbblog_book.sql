INSERT INTO dbblog.book (id, title, cover, author, category_id, recommend, publisher, publish_date, page_num, grade, description, catalogue, create_time, update_time, read_num, comment_num, like_num, publish, progress, reading) VALUES (1, '深入理解Java虚拟机（第2版）', 'http://oss.dblearn.cn/dbblog/20190303/01c91a28bf944010ade45fd876e94b8c.jpg', '周志明', '4,5,6', 1, '机械工业出版社', '2013-09-01', 0, 4, '<p class="ql-align-justify">周志明，资深Java技术专家，对JavaEE企业级应用开发、OSGi、Java虚拟机和工作流等都有深入的研究，并在大量的实践中积累了丰富的经验。尤其精通Java虚拟机，撰写了大量与JVM相关的经典文章，被各大技术社区争相转载，是ITeye等技术社区公认的Java虚拟机方面的领袖人物之一。除本书外，还著有经典著作《深入理解OSGi：Equinox原理、应用与最佳实践》，广获读者好评。现任远光软件股份有限公司开发部总经理兼架构师，先后参与过国家电网、南方电网等多个国家级大型ERP项目的平台架构工作，对软件系统架构也有深刻的认识和体会。</p><p class="ql-align-justify">《深入理解Java虚拟机:JVM高级特性与最佳实践(第2版)》内容简介：第1版两年内印刷近10次，4家网上书店的评论近4?000条，98%以上的评论全部为5星级的好评，是整个Java图书领域公认的经典著作和超级畅销书，繁体版在台湾也十分受欢迎。第2版在第1版的基础上做了很大的改进：根据最新的JDK 1.7对全书内容进行了全面的升级和补充；增加了大量处理各种常见JVM问题的技巧和最佳实践；增加了若干与生产环境相结合的实战案例；对第1版中的错误和不足之处的修正；等等。第2版不仅技术更新、内容更丰富，而且实战性更强。</p><p class="ql-align-justify">《深入理解Java虚拟机:JVM高级特性与最佳实践(第2版)》共分为五大部分，围绕内存管理、执行子系统、程序编译与优化、高效并发等核心主题对JVM进行了全面而深入的分析，深刻揭示了JVM的工作原理。</p><p class="ql-align-justify">第一部分从宏观的角度介绍了整个Java技术体系、Java和JVM的发展历程、模块化，以及JDK的编译，这对理解书中后面内容有重要帮助。</p><p class="ql-align-justify">第二部分讲解了JVM的自动内存管理，包括虚拟机内存区域的划分原理以及各种内存溢出异常产生的原因；常见的垃圾收集算法以及垃圾收集器的特点和工作原理；常见虚拟机监控与故障处理工具的原理和使用方法。</p><p class="ql-align-justify">第三部分分析了虚拟机的执行子系统，包括类文件结构、虚拟机类加载机制、虚拟机字节码执行引擎。</p><p class="ql-align-justify">第四部分讲解了程序的编译与代码的优化，阐述了泛型、自动装箱拆箱、条件编译等语法糖的原理；讲解了虚拟机的热点探测方法、HotSpot的即时编译器、编译触发条件，以及如何从虚拟机外部观察和分析JIT编译的数据和结果；</p><p class="ql-align-justify">第五部分探讨了Java实现高效并发的原理，包括JVM内存模型的结构和操作；原子性、可见性和有序性在Java内存模型中的体现；先行发生原则的规则和使用；线程在Java语言中的实现原理；虚拟机实现高效并发所做的一系列锁优化措施。</p><p><br></p>', '<p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">前言</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">第一部分走近Java</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">第1章走近Java2</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">1.1概述2</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">1.2Java技术体系3</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">1.3Java发展史5</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">1.4Java虚拟机发展史9</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">1.4.1SunClassicExactVM9</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">1.4.2SunHotSpotVM11</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">1.4.3SunMobile—EmbeddedVMMeta—CircularVM12</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">1.4.4BEAJRockitIBMJ9VM13</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">1.4.5AzulVMBEALiquidVM14</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">1.4.6ApacheHarmonyGoogleAndroidDalvikVM14</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">1.4.7MicrosoftJVM及其他15</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">1.5展望Java技术的未来16</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">1.5.1模块化17</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">1.5.2混合语言17</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">1.5.3多核并行19</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">1.5.4进一步丰富语法20</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">1.5.564位虚拟机21</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">1.6实战：自己编译JDK22</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">1.6.1获取JDK源码22</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">1.6.2系统需求24</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">1.6.3构建编译环境25</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">1.6.4进行编译26</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">1.6.5在IDE工具中进行源码调试31</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">1.7本章小结35</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">第二部分自动内存管理机制</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">第2章Java内存区域与内存溢出异常38</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">2.1概述38</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">2.2运行时数据区域38</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">2.2.1程序计数器39</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">2.2.2Java虚拟机栈39</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">2.2.3本地方法栈40</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">2.2.4Java堆41</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">2.2.5方法区41</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">2.2.6运行时常量池42</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">2.2.7直接内存43</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">2.3HotSpot虚拟机对象探秘43</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">2.3.1对象的创建44</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">2.3.2对象的内存布局47</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">2.3.3对象的访问定位48</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">2.4实战：OutOfMemoryError异常50</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">2.4.1Java堆溢出51</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">2.4.2虚拟机栈和本地方法栈溢出53</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">2.4.3方法区和运行时常量池溢出56</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">2.4.4本机直接内存溢出59</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">2.5本章小结60</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">第3章垃圾收集器与内存分配策略61</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">3.1概述61</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">3.2对象已死吗62</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">3.2.1引用计数算法62</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">3.2.2可达性分析算法64</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">3.2.3再谈引用65</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">3.2.4生存还是死亡66</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">3.2.5回收方法区68</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">3.3垃圾收集算法69</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">3.3.1标记—清除算法69</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">3.3.2复制算法70</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">3.3.3标记—整理算法71</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">3.3.4分代收集算法72</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">3.4HotSpot的算法实现72</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">3.4.1枚举根节点72</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">3.4.2安全点73</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">3.4.3安全区域74</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">3.5垃圾收集器75</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">3.5.1Serial收集器76</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">3.5.2ParNew收集器77</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">3.5.3ParallelScavenge收集器79</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">3.5.4SerialOld收集器80</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">3.5.5ParallelOld收集器80</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">3.5.6CMS收集器81</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">3.5.7G1收集器84</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">3.5.8理解GC日志89</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">3.5.9垃圾收集器参数总结90</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">3.6内存分配与回收策略91</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">3.6.1对象优先在Eden分配91</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">3.6.2大对象直接进入老年代93</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">3.6.3长期存活的对象将进入老年代95</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">3.6.4动态对象年龄判定97</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">3.6.5空间分配担保98</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">3.7本章小结100</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">第4章虚拟机性能监控与故障处理工具101</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">4.1概述101</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">4.2JDK的命令行工具101</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">4.2.1jps：虚拟机进程状况工具104</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">4.2.2jstat：虚拟机统计信息监视工具105</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">4.2.3jinfo：Java配置信息工具106</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">4.2.4jmap：Java内存映像工具107</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">4.2.5jhat：虚拟机堆转储快照分析工具108</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">4.2.6jstack：Java堆栈跟踪工具109</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">4.2.7HSDIS：JIT生成代码反汇编111</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">4.3JDK的可视化工具114</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">4.3.1JConsole：Java监视与管理控制台115</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">4.3.2VisualVM：多合一故障处理工具122</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">4.4本章小结131</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">第5章调优案例分析与实战132</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">5.1概述132</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">5.2案例分析132</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">5.2.1高性能硬件上的程序部署策略132</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">5.2.2集群间同步导致的内存溢出135</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">5.2.3堆外内存导致的溢出错误136</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">5.2.4外部命令导致系统缓慢137</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">5.2.5服务器JVM进程崩溃138</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">5.2.6不恰当数据结构导致内存占用过大139</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">5.2.7由Windows虚拟内存导致的长时间停顿141</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">5.3实战：Eclipse运行速度调优142</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">5.3.1调优前的程序运行状态142</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">5.3.2升级JDK1.6的性能变化及兼容问题145</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">5.3.3编译时间和类加载时间的优化150</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">5.3.4调整内存设置控制垃圾收集频率153</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">5.3.5选择收集器降低延迟157</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">5.4本章小结160</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">第三部分虚拟机执行子系统</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">第6章类文件结构162</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">6.1概述162</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">6.2无关性的基石162</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">6.3Class类文件的结构164</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">6.3.1魔数与Class文件的版本166</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">6.3.2常量池167</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">6.3.3访问标志173</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">6.3.4类索引、父类索引与接口索引集合174</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">6.3.5字段表集合175</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">6.3.6方法表集合178</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">6.3.7属性表集合180</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">6.4字节码指令简介196</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">6.4.1字节码与数据类型197</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">6.4.2加载和存储指令199</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">6.4.3运算指令200</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">6.4.4类型转换指令202</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">6.4.5对象创建与访问指令203</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">6.4.6操作数栈管理指令203</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">6.4.7控制转移指令204</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">6.4.8方法调用和返回指令204</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">6.4.9异常处理指令205</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">6.4.10同步指令205</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">6.5公有设计和私有实现206</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">6.6Class文件结构的发展207</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">6.7本章小结208</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">第7章虚拟机类加载机制209</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">7.1概述209</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">7.2类加载的时机210</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">7.3类加载的过程214</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">7.3.1加载214</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">7.3.2验证216</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">7.3.3准备219</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">7.3.4解析220</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">7.3.5初始化225</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">7.4类加载器227</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">7.4.1类与类加载器228</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">7.4.2双亲委派模型229</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">7.4.3破坏双亲委派模型233</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">7.5本章小结235</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">第8章虚拟机字节码执行引擎236</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">8.1概述236</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">8.2运行时栈帧结构236</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">8.2.1局部变量表238</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">8.2.2操作数栈242</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">8.2.3动态连接243</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">8.2.4方法返回地址243</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">8.2.5附加信息244</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">8.3方法调用244</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">8.3.1解析244</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">8.3.2分派246</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">8.3.3动态类型语言支持258</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">8.4基于栈的字节码解释执行引擎269</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">8.4.1解释执行269</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">8.4.2基于栈的指令集与基于寄存器的指令集270</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">8.4.3基于栈的解释器执行过程272</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">8.5本章小结275</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">第9章类加载及执行子系统的案例与实战276</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">9.1概述276</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">9.2案例分析276</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">9.2.1Tomcat：正统的类加载器架构276</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">9.2.2OSGi：灵活的类加载器架构279</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">9.2.3字节码生成技术与动态代理的实现282</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">9.2.4Retrotranslator：跨越JDK版本286</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">9.3实战：自己动手实现远程执行功能289</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">9.3.1目标290</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">9.3.2思路290</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">9.3.3实现291</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">9.3.4验证298</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">9.4本章小结299</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">第四部分程序编译与代码优化</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">第10章早期（编译期）优化302</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">10.1概述302</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">10.2Javac编译器303</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">10.2.1Javac的源码与调试303</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">10.2.2解析与填充符号表305</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">10.2.3注解处理器307</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">10.2.4语义分析与字节码生成307</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">10.3Java语法糖的味道311</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">10.3.1泛型与类型擦除311</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">10.3.2自动装箱、拆箱与遍历循环315</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">10.3.3条件编译317</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">10.4实战：插入式注解处理器318</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">10.4.1实战目标318</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">10.4.2代码实现319</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">10.4.3运行与测试326</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">10.4.4其他应用案例327</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">10.5本章小结328</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">第11章晚期（运行期）优化329</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">11.1概述329</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">11.2HotSpot虚拟机内的即时编译器329</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">11.2.1解释器与编译器330</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">11.2.2编译对象与触发条件332</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">11.2.3编译过程337</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">11.2.4查看及分析即时编译结果339</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">11.3编译优化技术345</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">11.3.1优化技术概览346</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">11.3.2公共子表达式消除350</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">11.3.3数组边界检查消除351</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">11.3.4方法内联352</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">11.3.5逃逸分析354</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">11.4Java与C/C++的编译器对比356</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">11.5本章小结358</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">第五部分高效并发</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">第12章Java内存模型与线程360</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">12.1概述360</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">12.2硬件的效率与一致性361</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">12.3Java内存模型362</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">12.3.1主内存与工作内存363</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">12.3.2内存间交互操作364</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">12.3.3对于volatile型变量的特殊规则366</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">12.3.4对于long和double型变量的特殊规则372</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">12.3.5原子性、可见性与有序性373</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">12.3.6先行发生原则375</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">12.4Java与线程378</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">12.4.1线程的实现378</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">12.4.2Java线程调度381</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">12.4.3状态转换383</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">12.5本章小结384</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">第13章线程安全与锁优化385</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">13.1概述385</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">13.2线程安全385</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">13.2.1Java语言中的线程安全386</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">13.2.2线程安全的实现方法390</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">13.3锁优化397</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">13.3.1自旋锁与自适应自旋398</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">13.3.2锁消除398</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">13.3.3锁粗化400</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">13.3.4轻量级锁400</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">13.3.5偏向锁402</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">13.4本章小结403</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">附录</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">附录A编译Windows版的OpenJDK406</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">附录B虚拟机字节码指令表414</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">附录CHotSpot虚拟机主要参数表420</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">附录D对象查询语言（OQL）简介424</span></p><p><span style="background-color: rgb(250, 250, 250); color: rgb(68, 68, 68);">附录EJDK历史版本轨迹430</span></p>', '2019-03-03 23:33:11', '2019-03-03 23:33:11', 19, 0, 0, 1, 10, 1);